{"version":3,"sources":["Components/AQI/InfoAQI.js","Components/AQI/InfoDisplayAQI.js","Components/Weather/WeatherInfo.js","Components/Weather/WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Wrapper1","BackgroundWeather","Wrapper2","InfoAQI","data","style","color","flex","marginBottom","aqi","fontSize","marginTop","display","flexFlow","justifyContent","pm10","toFixed","pm25","no2","co","o3","so2","Display","InfoDisplayAQI","state","axios","get","then","res","setState","this","Component","WeatherInfo","appTemp","humidity","temp","windSpeed","weather","partOfDay","console","log","description","WeatherDisplay","WeatherCard","app_temp","rh","wind_spd","pod","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.55a4856c.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n\tdisplay: flex;\r\n\tflex-flow: column;\r\n\tflex: 1 1;\r\n\talign-items: center;\r\n`;\r\n\r\nconst Wrapper1 = styled.div`\r\n\tdisplay: flex;\r\n\tflex-flow: row;\r\n\tbackground: #b0e867;\r\n\twidth: 95%;\r\n\tborder-radius: 8px;\r\n\tjustify-content: space-around;\r\n\talign-items: center;\r\n\tfont-size: 1.5rem;\r\n`;\r\n\r\nconst BackgroundWeather = styled.div`\r\n\tbackground: black;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tdisplay: flex;\r\n\tflex-flow: column;\r\n\tjustify-content: space-around;\r\n\talign-items: center;\r\n\tpadding-bottom: 10px;\r\n`;\r\n\r\nconst Wrapper2 = styled(Wrapper1)`\r\n\tbackground: #49739a;\r\n\tmargin: 20px;\r\n`;\r\n\r\nfunction InfoAQI({ data }) {\r\n\treturn (\r\n\t\t<Wrapper>\r\n\t\t\t<BackgroundWeather>\r\n\t\t\t\t<h1 style={{ color: 'white' }}>Helsinki Air Quality Index</h1>\r\n\t\t\t\t<Wrapper1>\r\n\t\t\t\t\t<div style={{ flex: '2 1', marginBottom: '15px' }}>\r\n\t\t\t\t\t\t<h1>{data && data.aqi}</h1>\r\n\t\t\t\t\t\t<strong>\r\n\t\t\t\t\t\t\t<p style={{ fontSize: '1rem' }}>AQI</p>\r\n\t\t\t\t\t\t</strong>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tflex: '1 1',\r\n\t\t\t\t\t\t\tmarginTop: '3rem',\r\n\t\t\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\t\t\tflexFlow: 'column',\r\n\t\t\t\t\t\t\tjustifyContent: 'center',\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t{data && data.pm10.toFixed(2)}\r\n\t\t\t\t\t\t<strong>\r\n\t\t\t\t\t\t\t<p>PM 10 (µg/m³)</p>\r\n\t\t\t\t\t\t</strong>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tflex: '1 1',\r\n\t\t\t\t\t\t\tmarginTop: '3rem',\r\n\t\t\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\t\t\tflexFlow: 'column',\r\n\t\t\t\t\t\t\tjustifyContent: 'center',\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t{data && data.pm25.toFixed(2)}\r\n\t\t\t\t\t\t<strong>\r\n\t\t\t\t\t\t\t<p>PM 2.5 (µg/m³)</p>\r\n\t\t\t\t\t\t</strong>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Wrapper1>\r\n\t\t\t</BackgroundWeather>\r\n\r\n\t\t\t<Wrapper2>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tNO<span style={{ fontSize: '1rem' }}>2</span>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t{data && data.no2.toFixed(2)}\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tCO\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t{data && data.co.toFixed(2)}\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tO<span style={{ fontSize: '1rem' }}>3</span>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t{data && data.o3.toFixed(2)}\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tSO<span style={{ fontSize: '1rem' }}>2</span>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t{data && data.so2.toFixed(2)}\r\n\t\t\t\t</p>\r\n\t\t\t</Wrapper2>\r\n\t\t</Wrapper>\r\n\t);\r\n}\r\n\r\nexport default InfoAQI;\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport InfoAQI from './InfoAQI';\r\n\r\nconst Display = styled.div`\r\n\tmin-height: 45vh;\r\n\tmin-width: 25vw;\r\n\tbackground: white;\r\n\topacity: 0.8;\r\n\tmargin: 20px;\r\n\tborder-radius: 8px;\r\n\topacity: 0.8;\r\n\ttext-align: center;\r\n\tdisplay: flex;\r\n\tflex-flow: column;\r\n`;\r\n\r\nclass InfoDisplayAQI extends Component {\r\n\tstate = {\r\n\t\taqi: null,\r\n\t};\r\n\tcomponentDidMount() {\r\n\t\taxios\r\n\t\t\t.get(\r\n\t\t\t\t'https://api.weatherbit.io/v2.0/current/airquality?city=Helsinki&key=12b3830093e741069ba73debc71898a8'\r\n\t\t\t)\r\n\t\t\t.then((res) => this.setState({ aqi: res.data.data[0] }));\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Display>\r\n\t\t\t\t\t<InfoAQI data={this.state.aqi} />\r\n\t\t\t\t</Display>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default InfoDisplayAQI;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n\tdisplay: flex;\r\n\tflex-flow: column;\r\n\tflex: 1 1;\r\n\talign-items: center;\r\n`;\r\n\r\nconst BackgroundWeather = styled.div`\r\n\tbackground: black;\r\n\twidth: 100%;\r\n\tdisplay: flex;\r\n\tflex-flow: column;\r\n\tjustify-content: space-around;\r\n\talign-items: center;\r\n\tpadding-bottom: 10px;\r\n`;\r\n\r\nconst Wrapper1 = styled.div`\r\n\tdisplay: flex;\r\n\tflex-flow: row;\r\n\tbackground: #b0e867;\r\n\twidth: 95%;\r\n\tborder-radius: 8px;\r\n\tjustify-content: space-around;\r\n\talign-items: center;\r\n\tfont-size: 1.5rem;\r\n`;\r\n\r\nconst Wrapper2 = styled(Wrapper1)`\r\n\tbackground: #49739a;\r\n\tmargin: 20px;\r\n`;\r\n\r\nfunction WeatherInfo({\r\n\tappTemp,\r\n\thumidity,\r\n\ttemp,\r\n\twindSpeed,\r\n\tpartOfDay,\r\n\tweather,\r\n}) {\r\n\tconsole.log(weather);\r\n\treturn (\r\n\t\t<Wrapper>\r\n\t\t\t<BackgroundWeather>\r\n\t\t\t\t<h1 style={{ color: 'white' }}>Helsinki Weather</h1>\r\n\t\t\t\t<Wrapper1>\r\n\t\t\t\t\t<div style={{ flex: '2 1', marginBottom: '15px' }}>\r\n\t\t\t\t\t\t<h1>{temp}</h1>\r\n\t\t\t\t\t\t<strong>\r\n\t\t\t\t\t\t\t<p style={{ fontSize: '1rem' }}>Celcius</p>\r\n\t\t\t\t\t\t</strong>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tflex: '1 1',\r\n\t\t\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\t\t\tflexFlow: 'column',\r\n\t\t\t\t\t\t\tjustifyContent: 'center',\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t<strong>\r\n\t\t\t\t\t\t\t<p>Feels like</p>\r\n\t\t\t\t\t\t</strong>\r\n\t\t\t\t\t\t{appTemp}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tflex: '1 1',\r\n\t\t\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\t\t\tflexFlow: 'column',\r\n\t\t\t\t\t\t\tjustifyContent: 'center',\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t<strong>\r\n\t\t\t\t\t\t\t<p>Wind</p>\r\n\t\t\t\t\t\t</strong>\r\n\t\t\t\t\t\t{windSpeed} km/h\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Wrapper1>\r\n\t\t\t</BackgroundWeather>\r\n\r\n\t\t\t<Wrapper2>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tHumidity\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t{humidity} %\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tWeather\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<strong>{weather && weather.description}</strong>\r\n\t\t\t\t</p>\r\n\t\t\t</Wrapper2>\r\n\t\t</Wrapper>\r\n\t);\r\n}\r\n\r\nexport default WeatherInfo;\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport WeatherInfo from './WeatherInfo';\r\n\r\nconst WeatherDisplay = styled.div`\r\n\tmin-height: 45vh;\r\n\tmin-width: 25vw;\r\n\tbackground: white;\r\n\topacity: 0.8;\r\n\tmargin: 20px;\r\n\tborder-radius: 8px;\r\n\topacity: 0.8;\r\n\ttext-align: center;\r\n\tdisplay: flex;\r\n\tflex-flow: column;\r\n`;\r\n\r\nclass WeatherCard extends Component {\r\n\tstate = {\r\n\t\tappTemp: null,\r\n\t\thumidity: null,\r\n\t\ttemp: null,\r\n\t\twindSpeed: null,\r\n\t\tpartOfDay: null,\r\n\t\tweather: null,\r\n\t};\r\n\tcomponentDidMount() {\r\n\t\taxios\r\n\t\t\t.get(\r\n\t\t\t\t'https://api.weatherbit.io/v2.0/current?city=Helsinki&key=12b3830093e741069ba73debc71898a8'\r\n\t\t\t)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tappTemp: res.data.data[0].app_temp,\r\n\t\t\t\t\thumidity: res.data.data[0].rh,\r\n\t\t\t\t\ttemp: res.data.data[0].temp,\r\n\t\t\t\t\twindSpeed: res.data.data[0].wind_spd,\r\n\t\t\t\t\tpartOfDay: res.data.data[0].pod,\r\n\t\t\t\t\tweather: res.data.data[0].weather,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<WeatherDisplay>\r\n\t\t\t\t\t<WeatherInfo\r\n\t\t\t\t\t\tappTemp={this.state.appTemp}\r\n\t\t\t\t\t\thumidity={this.state.humidity}\r\n\t\t\t\t\t\ttemp={this.state.temp}\r\n\t\t\t\t\t\twindSpeed={this.state.windSpeed}\r\n\t\t\t\t\t\tpartOfDay={this.state.partOfDay}\r\n\t\t\t\t\t\tweather={this.state.weather}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</WeatherDisplay>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default WeatherCard;\r\n","import React, { Component } from 'react';\nimport InfoDisplayAQI from './Components/AQI/InfoDisplayAQI';\nimport './CSS/App.css';\nimport WeatherCard from './Components/Weather/WeatherCard';\n\nexport default class App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<InfoDisplayAQI />\n\t\t\t\t<WeatherCard />\n\t\t\t</div>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './CSS/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}